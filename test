//******************************************************************************
//              Copyright(c) 2008 ASolid Technology Co., Ltd.
//                         All Rights Reserved
//******************************************************************************
//
// Filename: fsm_rwdata.v
//
// Description:
//   State machine for axi write data 
//
// Revision:
//   $Author: paul.huang $
//   $Date: 2023/03/03 06:06:49 $
//   $Revision: 1.2 $
//
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
// Macro definition and/or included file
//------------------------------------------------------------------------------
//`include "buf_ctl64k.vh"

//------------------------------------------------------------------------------
// Module declaration
//------------------------------------------------------------------------------
module buf_ctl128k_512b_1ce_raid(

        clk_axi                 , 
        rst_axi_n               ,

        awaddr                  ,
        awvalid                 ,
        awlen                   ,
        awsize                  ,
        awburst                 ,
        
        wvalid                  ,
        wdata                   ,
        wlast                   ,
        wstrb                   ,
        
        araddr                  ,
        arvalid                 ,
        arlen                   ,
        arsize                  ,
        arburst                 ,
        arid                    ,
        
        rready                  ,
        
        
        buf_ctl_awready         ,
        buf_ctl_wready          ,
        buf_ctl_arready         ,
        buf_ctl_rvalid          ,
        buf_ctl_rdata           ,
        buf_ctl_rid             ,
        buf_ctl_rlast           ,

        //raid sram interface
        raid_sram_do_CTRL0      ,
        raid_sram_ce_CTRL0      ,
        raid_sram_we_CTRL0      ,
        raid_sram_addr_CTRL0    ,
        raid_sram_wstrb_CTRL0   , 

        raid_sram_do_CTRL1      , 
        raid_sram_ce_CTRL1      , 
        raid_sram_we_CTRL1      ,
        raid_sram_addr_CTRL1    ,
        raid_sram_wstrb_CTRL1   ,

        //Raid interface
        raid_en                 ,
        raid_ch0_id             ,
        raid_ch0_type           ,
        raid_ch1_id             ,
        raid_ch1_type           
);

//------------------------------------------------------------------------------
// Parameter declaration
//------------------------------------------------------------------------------
parameter BUS_WIDTH  = 128;                
parameter STROB_WIDTH  = 16;                
parameter RAM_WIDTH  = 512;

parameter BUF_SIZE     = 128;   //KB   // BUF_BIT_WIDTH = LOG(BUF_SIZE,2)
parameter BUF_BIT_WIDTH= 17;   //15 - 32K,  16 - 64K, 17 -128K, 18 - 256K
parameter BUF_MSB_BIT  = BUF_BIT_WIDTH-1; //16   

parameter BNK_SIZE     = 128;   //KB   // BNK_BIT_WIDTH = LOG(BNK_SIZE,2)
parameter BNK_BIT_WIDTH= 17;   //14 - 16K, 15 - 32K,  16 - 64K, 17 -128K
parameter BNK_MSB_BIT  = BNK_BIT_WIDTH-1; //15   
parameter BNK_NUM      = 1;    // BUF_SIZE / BNK_SIZE
parameter BNK_NUM_BIT_WIDTH = 0; // LOG(BNK_NUM,2)

parameter WHOLE_RAM_BIT_WIDTH= BUF_BIT_WIDTH -4;        //17-4=13   //10 - 16K, 11 - 32K,  12 - 64K, 13 -128K, 14 -256K 
parameter WHOLE_RAM_MSB_BIT  = WHOLE_RAM_BIT_WIDTH -1;  //12   

parameter RAM_BIT_WIDTH= BUF_BIT_WIDTH -4 - BNK_NUM_BIT_WIDTH;  //13  //10 - 16K, 11 - 32K,  12 - 64K, 13 -128K
parameter RAM_MSB_BIT  = BUF_MSB_BIT -4;  //12   

//parameter ISNT_RAM_MSB_WIDTH = RAM_BIT_WIDTH;  // 11 -2 ()  
//parameter ISNT_RAM_MSB_BIT   = RAM_MSB_BIT - BNK_NUM_BIT_WIDTH;  //    -2:512bit

parameter CMD_RW_OFFSET= 0;     //1 bit
parameter CMD_LEN_OFFSET= 1;    //4 bits 
parameter CMD_SIZE_OFFSET= 5;   //3 bits
parameter CMD_ADDR_OFFSET= 8;


//--------------------------------------------------------------------------
// User defined parameters
//--------------------------------------------------------------------------
// None

//--------------------------------------------------------------------------
// Standard parameters
//--------------------------------------------------------------------------
// None

//--------------------------------------------------------------------------
// Local parameters
//--------------------------------------------------------------------------
//------------------------------------------------------------------------------
// Input/Output declaration
//------------------------------------------------------------------------------
//--------------------------------------------------------------------------
// Input declaration
//--------------------------------------------------------------------------

input          clk_axi    ;
input          rst_axi_n  ; 
                                
input  [31:0]  awaddr     ;
input          awvalid    ;
input  [3:0]   awlen      ;
input  [2:0]   awsize     ;
input  [1:0]   awburst    ;
input          wvalid     ;
input  [BUS_WIDTH-1:0]  wdata      ;
input          wlast      ;
input  [STROB_WIDTH-1:0]   wstrb      ;
input  [31:0]  araddr     ;
input          arvalid    ;
input  [3:0]   arlen      ;
input  [2:0]   arsize     ;
input  [1:0]   arburst    ;
input  [5:0]   arid       ;
input          rready     ;
//raid sram interface
input  [511:0] raid_sram_do_CTRL0;
input          raid_sram_ce_CTRL0;
input          raid_sram_we_CTRL0;
input  [9:0]   raid_sram_addr_CTRL0;
input  [63:0]  raid_sram_wstrb_CTRL0; 

input  [511:0] raid_sram_do_CTRL1;
input          raid_sram_ce_CTRL1;
input          raid_sram_we_CTRL1;
input  [9:0]   raid_sram_addr_CTRL1;
input  [63:0]  raid_sram_wstrb_CTRL1;

//raid interface
input          raid_en;
input  [3:0]   raid_ch0_id;
input          raid_ch0_type;
input  [3:0]   raid_ch1_id;
input          raid_ch1_type;

//--------------------------------------------------------------------------
// Output declaration
//--------------------------------------------------------------------------
output          buf_ctl_awready    ;
output          buf_ctl_wready     ;
output          buf_ctl_arready    ;
output          buf_ctl_rvalid     ;
output          buf_ctl_rlast      ;
output  [5:0]   buf_ctl_rid        ;
output  [BUS_WIDTH-1:0]  buf_ctl_rdata      ;


//------------------------------------------------------------------------------
// Signal declaration
//------------------------------------------------------------------------------
reg     [BUF_MSB_BIT:0]         addr_gen;
wire    [BUF_MSB_BIT:0]         rw_addr;
wire    [BUF_MSB_BIT:0]         axi_address;
wire    [WHOLE_RAM_MSB_BIT:0]   ram_addr;

wire    [BUS_WIDTH-1:0]  buf_ctl_rdata;
wire            buf_ctl_rlast;
reg     [1:0]   cmd_grant;
reg     [3:0]   rburst_cnt;
reg     [3:0]   burst_length;
wire    [2:0]   burst_size;
reg     [2:0]   burst_size_d;
reg             current_grant_read;
reg             read_data_last_d;

wire            from_queue_last;
wire    [BUS_WIDTH-1:0]         from_queue_wdata;
wire    [STROB_WIDTH-1:0]       from_queue_wstb;
wire    [STROB_WIDTH-1:0]       ram_we_n;
wire    [BUS_WIDTH-1:0]         ram_data_in;
wire    [BUS_WIDTH-1:0]         ram_data_out;
wire    [BUS_WIDTH-1:0]         ram_data_out_dw_reorder;

wire            fsm_rwdata_ce_prd;
wire            fsm_rwdata_wr_prd;
wire            fsm_rwdata_rd_prd;
wire            fsm_rwdata_pop_wdata;
wire            fsm_rwdata_push_rdata;
reg             rdata_push;
wire            fsm_rwdata_pop_ar;
wire            fsm_rwdata_pop_aw;
wire            cmd_queue_full;
wire            cmd_queue_empty;

wire    [CMD_ADDR_OFFSET+BUF_BIT_WIDTH-1:0]  cmd_queue_data_out;
wire    [CMD_ADDR_OFFSET+BUF_BIT_WIDTH-1:0]  cmd_data_in;

wire    [BUS_WIDTH+STROB_WIDTH+1-1:0]  wdata_queue_data_out   ;  
wire    [BUS_WIDTH+STROB_WIDTH+1-1:0]  wqueue_data_in;

wire            wdata_queue_full ;
wire            wdata_queue_empty;
wire            read_data_last;
wire            rdata_queue_full;
wire            rdata_queue_empty;
wire            buf_ctl_rvalid;
wire    [BUS_WIDTH+1-1:0]  rdata_queue_data_out   ;  
wire    [3:0]   axi_len;
wire    [2:0]   axi_size;
//raid addr
reg     [10:0]  raid_addr;
//
//------------------------------------------------------------------------------
// Main code
//------------------------------------------------------------------------------
assign buf_ctl_rid =  6'h01;

assign buf_ctl_awready = cmd_grant[0] && !cmd_queue_full;
assign buf_ctl_arready = cmd_grant[1] && !cmd_queue_full;

assign aw_push =  cmd_grant[0] && !cmd_queue_full;
assign ar_push =  cmd_grant[1] && !cmd_queue_full;


assign cmd_push = aw_push || ar_push;
assign cmd_pop  =  fsm_rwdata_pop_ar || fsm_rwdata_pop_aw;

assign cmd_data_in  =  cmd_grant[1] ? { araddr[BUF_BIT_WIDTH-1:0],arsize[2:0],arlen[3:0], 1'b1} : 
                                      { awaddr[BUF_BIT_WIDTH-1:0],awsize[2:0],awlen[3:0], 1'b0} ;


assign do_wdata    = !cmd_queue_empty && !cmd_queue_data_out[CMD_RW_OFFSET];
assign do_rdata    = !cmd_queue_empty &&  cmd_queue_data_out[CMD_RW_OFFSET];

assign axi_len     = cmd_queue_data_out[CMD_LEN_OFFSET+3 :CMD_LEN_OFFSET ];
assign axi_size    = cmd_queue_data_out[CMD_SIZE_OFFSET+2:CMD_SIZE_OFFSET];
assign axi_address = cmd_queue_data_out[CMD_ADDR_OFFSET+BUF_BIT_WIDTH-1:CMD_ADDR_OFFSET];


assign burst_size = fsm_rwdata_pop_ar ? axi_size[2:0] : 
                                        burst_size_d[2:0];
always @(negedge rst_axi_n or posedge clk_axi) begin
  if (!rst_axi_n)
    burst_size_d <= #1 3'd0;
  else if(cmd_pop)
    burst_size_d <= #1 axi_size[2:0];
end

always @(negedge rst_axi_n or posedge clk_axi) begin
  if (!rst_axi_n)
    burst_length <= #1 4'd0;
  else if(cmd_pop)
    burst_length <= #1 axi_len;
end


always @* begin
  if(current_grant_read)
    cmd_grant = (awvalid) ? 2'b01 :
                (arvalid) ? 2'b10 :
                            2'b00;

  else
    cmd_grant = (arvalid) ? 2'b10 :
                (awvalid) ? 2'b01 :
                            2'b00;
end

always @(negedge rst_axi_n or posedge clk_axi) begin
  if (!rst_axi_n)
    current_grant_read <= #1 1'b0;
  else if (ar_push)
    current_grant_read <= #1 1'b1;
  else if (aw_push)
    current_grant_read <= #1 1'b0;
end    

//squeue #(23, 2, 3) //(WIDTH, ORDER, FULL_TH)     //FUU_TH=2 not 3,avoid queue 1 more than dec module
squeue #(CMD_ADDR_OFFSET+BUF_BIT_WIDTH, 1, 1) //(WIDTH, ORDER, FULL_TH)     //FUU_TH=2 not 3,avoid queue 1 more than dec module
        u_cmd_queue(
        .clk                    (clk_axi                ), 
        .rst_n                  (rst_axi_n              ),
        .init                   (1'b0                   ),
        .push                   (cmd_push               ),
        .pop                    (cmd_pop                ),
        .data_in                (cmd_data_in            ),
                                                             
        .squeue_data_out        (cmd_queue_data_out     ),
        .squeue_full            (cmd_queue_full         ),
        .squeue_empty           (cmd_queue_empty        )
);



assign pause_wdata = wdata_queue_empty;


assign wdata_push               =  wvalid && buf_ctl_wready;
assign buf_ctl_wready           = !wdata_queue_full;

assign wqueue_data_in = {wlast,wstrb,wdata};

assign buf_ctl_rvalid   = !rdata_queue_empty;
assign pause_rdata      = rdata_queue_full || !rready;
assign rdata_pop        = buf_ctl_rvalid && rready;

assign buf_ctl_rdata = rdata_queue_data_out[BUS_WIDTH-1:0];     //[127:0]
assign buf_ctl_rlast = rdata_queue_data_out[BUS_WIDTH];         //128

always @(negedge rst_axi_n or posedge clk_axi) begin
  if (!rst_axi_n)
    rdata_push <= #1 1'b0;
  else if(!read_data_last)
    rdata_push <= #1 fsm_rwdata_push_rdata;
  else
    rdata_push <= #1 1'b0;
end

always @(negedge rst_axi_n or posedge clk_axi) begin
  if (!rst_axi_n)
    read_data_last_d <= #1 1'b0;
  else
    read_data_last_d <= #1 read_data_last;
end

// raid control

always @(posedge clk_axi or negedge rst_axi_n) begin
  if (!rst_axi_n)
    raid_addr = 0;
  else if (!raid_ch0_type | !raid_ch1_type) begin
         if ( raid_ch0_id == 0 | raid_ch1_id == 0)
            raid_addr = raid_sram_addr_CTRL0 | raid_sram_addr_CTRL1;
         else if (raid_ch0_id == 1'b1 | raid_ch1_id == 1'b1)
            raid_addr = (raid_sram_addr_CTRL0 | raid_sram_addr_CTRL1 | 11'b00100000000);
         else if (raid_ch0_id == 2'b10 | raid_ch1_id == 2'b10)
            raid_addr = (raid_sram_addr_CTRL0 | raid_sram_addr_CTRL1 | 11'b01000000000);
         else if (raid_ch0_id == 2'b11 | raid_ch1_id == 2'b11)
            raid_addr = (raid_sram_addr_CTRL0 | raid_sram_addr_CTRL1 | 11'b01100000000);
         else if (raid_ch0_id == 3'b100 | raid_ch1_id == 3'b100)
            raid_addr = (raid_sram_addr_CTRL0 | raid_sram_addr_CTRL1 | 11'b10000000000);
         else if (raid_ch0_id == 3'b101 | raid_ch1_id == 3'b101)
            raid_addr = (raid_sram_addr_CTRL0 | raid_sram_addr_CTRL1 | 11'b10100000000);
         else if (raid_ch0_id == 3'b110 | raid_ch1_id == 3'b110)
            raid_addr = (raid_sram_addr_CTRL0 | raid_sram_addr_CTRL1 | 11'b11000000000);
         else if (raid_ch0_id == 3'b111 | raid_ch1_id == 3'b111)
            raid_addr = (raid_sram_addr_CTRL0 | raid_sram_addr_CTRL1 | 11'b11100000000);
         else 
            raid_addr = 0;
    end
end



//


squeue #(BUS_WIDTH+STROB_WIDTH+1, 2, 3) //(WIDTH, ORDER, FULL_TH)     //FUU_TH=2 not 3,avoid queue 1 more than dec module
        u_wdata_queue(
        .clk                    (clk_axi                ), 
        .rst_n                  (rst_axi_n              ),
        .init                   (1'b0                   ),
        .push                   (wdata_push             ),
        .pop                    (fsm_rwdata_pop_wdata   ),
        .data_in                (wqueue_data_in         ),
                                                             
        .squeue_data_out        (wdata_queue_data_out   ),
        .squeue_full            (wdata_queue_full       ),
        .squeue_empty           (wdata_queue_empty      )
);

squeue #(BUS_WIDTH+1, 2, 3) //(WIDTH, ORDER, FULL_TH)
        u_rdata_queue(
        .clk                    (clk_axi                ), 
        .rst_n                  (rst_axi_n              ),
        .init                   (1'b0                   ),
        .push                   (rdata_push             ),
        .pop                    (rdata_pop              ),
        .data_in                ({read_data_last,ram_data_out_dw_reorder}),
                                                             
        .squeue_data_out        (rdata_queue_data_out   ),
        .squeue_full            (rdata_queue_full       ),
        .squeue_empty           (rdata_queue_empty      )
);




assign from_queue_wdata = wdata_queue_data_out[BUS_WIDTH-1:0];
assign from_queue_wstb  = wdata_queue_data_out[BUS_WIDTH+STROB_WIDTH-1:BUS_WIDTH];
assign from_queue_last  = fsm_rwdata_pop_wdata && wdata_queue_data_out[BUS_WIDTH+STROB_WIDTH];


wire    [4:0]   addr_gen_inc;

assign rw_addr    = fsm_rwdata_pop_ar ? axi_address[BUF_MSB_BIT:0] : 
                                        addr_gen[BUF_MSB_BIT:0];

assign bus_size8   = (burst_size == 3'b000);
assign bus_size16  = (burst_size == 3'b001);
assign bus_size32  = (burst_size == 3'b010);
assign bus_size64  = (burst_size == 3'b011);
assign bus_size128 = (burst_size == 3'b100);

assign qword0 = bus_size64 && (rw_addr[3]==1'd0);
assign qword1 = bus_size64 && (rw_addr[3]==1'd1);
assign dword0 = bus_size32 && (rw_addr[3:2]==2'd0);
assign dword1 = bus_size32 && (rw_addr[3:2]==2'd1);
assign dword2 = bus_size32 && (rw_addr[3:2]==2'd2);
assign dword3 = bus_size32 && (rw_addr[3:2]==2'd3);
assign word0  = bus_size16 && (rw_addr[3:1]==3'd0);
assign word1  = bus_size16 && (rw_addr[3:1]==3'd1);
assign word2  = bus_size16 && (rw_addr[3:1]==3'd2);
assign word3  = bus_size16 && (rw_addr[3:1]==3'd3);
assign word4  = bus_size16 && (rw_addr[3:1]==3'd4);
assign word5  = bus_size16 && (rw_addr[3:1]==3'd5);
assign word6  = bus_size16 && (rw_addr[3:1]==3'd6);
assign word7  = bus_size16 && (rw_addr[3:1]==3'd7);
assign byte0  = bus_size8 && (rw_addr[3:0]==4'h0);
assign byte1  = bus_size8 && (rw_addr[3:0]==4'h1);
assign byte2  = bus_size8 && (rw_addr[3:0]==4'h2);
assign byte3  = bus_size8 && (rw_addr[3:0]==4'h3);
assign byte4  = bus_size8 && (rw_addr[3:0]==4'h4);
assign byte5  = bus_size8 && (rw_addr[3:0]==4'h5);
assign byte6  = bus_size8 && (rw_addr[3:0]==4'h6);
assign byte7  = bus_size8 && (rw_addr[3:0]==4'h7);
assign byte8  = bus_size8 && (rw_addr[3:0]==4'h8);
assign byte9  = bus_size8 && (rw_addr[3:0]==4'h9);
assign byte10 = bus_size8 && (rw_addr[3:0]==4'hA);
assign byte11 = bus_size8 && (rw_addr[3:0]==4'hB);
assign byte12 = bus_size8 && (rw_addr[3:0]==4'hC);
assign byte13 = bus_size8 && (rw_addr[3:0]==4'hD);
assign byte14 = bus_size8 && (rw_addr[3:0]==4'hE);
assign byte15 = bus_size8 && (rw_addr[3:0]==4'hF);

assign addr_gen_inc = bus_size8  ? 5'd1 :
                      bus_size16 ? 5'd2 : 
                      bus_size32 ? 5'd4 :
                      bus_size64 ? 5'd8 : 5'd16 ;                                       


always @(negedge rst_axi_n or posedge clk_axi) begin
  if (!rst_axi_n)
    addr_gen <= #1 {BUF_BIT_WIDTH{1'b0}};
  else if (fsm_rwdata_pop_aw)
    addr_gen <= #1 axi_address[BUF_MSB_BIT:0];
  else if (fsm_rwdata_pop_ar)
    addr_gen <= #1 axi_address[BUF_MSB_BIT:0] + addr_gen_inc;
  else if (fsm_rwdata_pop_wdata || fsm_rwdata_push_rdata)
    addr_gen <= #1 addr_gen + addr_gen_inc;
end


assign read_data_last = fsm_rwdata_rd_prd && rdata_push && (rburst_cnt == burst_length);

always @(negedge rst_axi_n or posedge clk_axi) begin
  if (!rst_axi_n)
    rburst_cnt <= #1 4'd0;
  else if (read_data_last)
    rburst_cnt <= #1 4'd0;
  else if (rdata_push)
    rburst_cnt <= #1 rburst_cnt + 1'b1;
end

//assign ram_ce_n    = ~fsm_rwdata_ce_prd;
assign ram_ce    = (fsm_rwdata_pop_wdata ||
                    fsm_rwdata_push_rdata ||
                    rdata_push
                       );

assign ram_ce_n    = ~(fsm_rwdata_pop_wdata ||
                       fsm_rwdata_push_rdata ||
                       rdata_push
                       );
assign ram_addr    = rw_addr[BUF_MSB_BIT:4];

assign ram_data_in = from_queue_wdata;
assign ram_we_n    = ~({STROB_WIDTH{fsm_rwdata_pop_wdata}} & from_queue_wstb[STROB_WIDTH-1:0] &
                         (
                           {16{bus_size128}} |
                           {{8{qword1}},{8{qword0}}} |
                           {{4{dword3}},{4{dword2}},{4{dword1}},{4{dword0}}} |
                           {{2{word7}},{2{word6}},{2{word5}},{2{word4}},{2{word3}},{2{word2}},{2{word1}},{2{word0}}}|
                           {byte15,byte14,byte13,byte12,byte11,byte10,byte9,byte8,
                            byte7,byte6,byte5,byte4,byte3,byte2,byte1,byte0}
                         ));

wire                    ram_bwe;
wire    [BUS_WIDTH-1:0] ram_bwem;
assign ram_bwe  =  fsm_rwdata_pop_wdata;
assign ram_bwem =  ({128{fsm_rwdata_pop_wdata}} & 
                               {{8{from_queue_wstb[15]}},{8{from_queue_wstb[14]}},{8{from_queue_wstb[13]}},{8{from_queue_wstb[12]}},
                                {8{from_queue_wstb[11]}},{8{from_queue_wstb[10]}},{8{from_queue_wstb[9]}},{8{from_queue_wstb[8]}},
                                {8{from_queue_wstb[7]}},{8{from_queue_wstb[6]}},{8{from_queue_wstb[5]}},{8{from_queue_wstb[4]}},
                                {8{from_queue_wstb[3]}},{8{from_queue_wstb[2]}},{8{from_queue_wstb[1]}},{8{from_queue_wstb[0]}}} &
                         (
                           {128{bus_size128}} |
                           {{64{qword1}},{64{qword0}}} |
                           {{32{dword3}},{32{dword2}},{32{dword1}},{32{dword0}}} |
                           {{16{word7}},{16{word6}},{16{word5}},{16{word4}},{16{word3}},{16{word2}},{16{word1}},{16{word0}}}|
                           {{8{byte15}},{8{byte14}},{8{byte13}},{8{byte12}},{8{byte11}},{8{byte10}},{8{byte9}},{8{byte8}},
                            {8{byte7}}, {8{byte6}}, {8{byte5}}, {8{byte4}}, {8{byte3}}, {8{byte2}}, {8{byte1}},{8{byte0}}}
                         ));


  
fsm_rwdata u_fsm_rwdata(

	.clk_axi                (clk_axi                ),
	.rst_axi_n              (rst_axi_n              ),
        
        .do_rdata               (do_rdata               ),
        .do_wdata               (do_wdata               ),
        .pause_wdata            (pause_wdata            ),
        .pause_rdata            (pause_rdata            ),
        .from_queue_last        (from_queue_last        ),
        .read_data_last         (read_data_last         ),
          
        .fsm_rwdata_wr_prd      (fsm_rwdata_wr_prd      ),
        .fsm_rwdata_rd_prd      (fsm_rwdata_rd_prd      ),
        .fsm_rwdata_pop_wdata   (fsm_rwdata_pop_wdata   ), 
        .fsm_rwdata_push_rdata  (fsm_rwdata_push_rdata  ), 
        .fsm_rwdata_pop_ar      (fsm_rwdata_pop_ar      ), 
        .fsm_rwdata_pop_aw      (fsm_rwdata_pop_aw      ), 
        .fsm_rwdata_ce_prd      (fsm_rwdata_ce_prd      )

);


wire    [127:0]   ram_data_out00;
wire    [127:0]   ram_data_out01;
wire    [127:0]   ram_data_out10;
wire    [127:0]   ram_data_out11;

reg     [1:0]    ram_addr_LSb;    

always @(negedge rst_axi_n or posedge clk_axi) begin
  if (!rst_axi_n)
    ram_addr_LSb <= #1 2'b00;           
  else if (fsm_rwdata_pop_ar || fsm_rwdata_rd_prd)
    ram_addr_LSb <= #1 ram_addr[1:0];   
end

assign ce_00_n = !(ram_ce && (ram_addr[1:0]==2'b00));          
assign ce_01_n = !(ram_ce && (ram_addr[1:0]==2'b01));          
assign ce_10_n = !(ram_ce && (ram_addr[1:0]==2'b10));          
assign ce_11_n = !(ram_ce && (ram_addr[1:0]==2'b11));          

assign ram_ce00 = (ram_ce && (ram_addr[1:0]==2'b00));
assign ram_ce01 = (ram_ce && (ram_addr[1:0]==2'b01));
assign ram_ce10 = (ram_ce && (ram_addr[1:0]==2'b10));
assign ram_ce11 = (ram_ce && (ram_addr[1:0]==2'b11));

assign ram_bwe00  = ram_ce00 & ram_bwe; 
assign ram_bwe01  = ram_ce01 & ram_bwe; 
assign ram_bwe10  = ram_ce10 & ram_bwe; 
assign ram_bwe11  = ram_ce11 & ram_bwe; 

assign  ram_data_out_sel00 = (ram_addr_LSb[1:0] == 2'b00);
assign  ram_data_out_sel01 = (ram_addr_LSb[1:0] == 2'b01);
assign  ram_data_out_sel10 = (ram_addr_LSb[1:0] == 2'b10);
assign  ram_data_out_sel11 = (ram_addr_LSb[1:0] == 2'b11);

//assign ram_data_out = {ram_data_out1,ram_data_out0};
//assign ram_data_out = ({BUS_WIDTH{ram_data_out_sel0}} & {ram_data_out01,ram_data_out00}) |
//                      ({BUS_WIDTH{ram_data_out_sel1}} & {ram_data_out11,ram_data_out10});
assign ram_data_out = ({BUS_WIDTH{ram_data_out_sel00}} & {ram_data_out00}) |
                      ({BUS_WIDTH{ram_data_out_sel01}} & {ram_data_out01}) |
                      ({BUS_WIDTH{ram_data_out_sel10}} & {ram_data_out10}) |
                      ({BUS_WIDTH{ram_data_out_sel11}} & {ram_data_out11});


assign ram_data_out_dw_reorder = ram_data_out[BUS_WIDTH-1:0];
                                        
wire    [10:0]  mux_ram_addr;
wire    [127:0] mux_ram_data_in0; 
wire    [127:0] mux_ram_data_in1; 
wire    [127:0] mux_ram_data_in2; 
wire    [127:0] mux_ram_data_in3; 
wire    [127:0] mux_ram_bwem; 
wire            mux_ram_bwe00;
wire            mux_ram_bwe01;
wire            mux_ram_bwe10;
wire            mux_ram_bwe11;
wire            mux_ram_ce00; 
wire            mux_ram_ce01; 
wire            mux_ram_ce10; 
wire            mux_ram_ce11; 
wire            raid_en;

assign mux_ram_addr = raid_en ? 11'd0 :  ram_addr[RAM_MSB_BIT:2];
assign mux_ram_data_in0 = raid_en ? (raid_sram_do_CTRL0[127:0]   | raid_sram_do_CTRL1[127:0]  ) :  ram_data_in[127:0];
assign mux_ram_data_in1 = raid_en ? (raid_sram_do_CTRL0[255:128] | raid_sram_do_CTRL1[255:128]) :  ram_data_in[127:0];
assign mux_ram_data_in2 = raid_en ? (raid_sram_do_CTRL0[383:256] | raid_sram_do_CTRL1[383:256]) :  ram_data_in[127:0];
assign mux_ram_data_in3 = raid_en ? (raid_sram_do_CTRL0[511:384] | raid_sram_do_CTRL1[511:384]) :  ram_data_in[127:0];
assign mux_ram_bwem = raid_en  ? ({raid_sram_wstrb_CTRL0,raid_sram_wstrb_CTRL0} | {raid_sram_wstrb_CTRL1,raid_sram_wstrb_CTRL1}):  ram_bwem[127:0];
assign mux_ram_bwe00 = raid_en ? (raid_sram_we_CTRL0 | raid_sram_we_CTRL1) :  ram_bwe00;
assign mux_ram_bwe01 = raid_en ? (raid_sram_we_CTRL0 | raid_sram_we_CTRL1) :  ram_bwe01;
assign mux_ram_bwe10 = raid_en ? (raid_sram_we_CTRL0 | raid_sram_we_CTRL1) :  ram_bwe10;
assign mux_ram_bwe11 = raid_en ? (raid_sram_we_CTRL0 | raid_sram_we_CTRL1) :  ram_bwe11;
assign mux_ram_ce00  = raid_en ? (raid_sram_ce_CTRL0 | raid_sram_ce_CTRL1) :  ram_ce00;
assign mux_ram_ce01  = raid_en ? (raid_sram_ce_CTRL0 | raid_sram_ce_CTRL1) :  ram_ce01;
assign mux_ram_ce10  = raid_en ? (raid_sram_ce_CTRL0 | raid_sram_ce_CTRL1) :  ram_ce10;
assign mux_ram_ce11  = raid_en ? (raid_sram_ce_CTRL0 | raid_sram_ce_CTRL1) :  ram_ce11;

sram_2048x128_wrapper u00_sram_2048x128_wrapper( 
        .q              ( ram_data_out00                ), 
        .adr            ( mux_ram_addr[10:0]   ),  //ram_addr[12:2]
        .d              ( mux_ram_data_in0[127:0]       ), 
        .wem            ( mux_ram_bwem[127:0]           ), 
        .we             ( mux_ram_bwe00                 ), 
        .me             ( mux_ram_ce00                  ), 
        .clk            ( clk_axi                       ), 
        .test1          ( 1'b0      ), 
        .rme            ( 1'b0      ), 
        .rm             ( 4'd0      ), 
        .ls             ( 1'b0      )
        );
sram_2048x128_wrapper u01_sram_2048x128_wrapper( 
        .q              ( ram_data_out01                ), 
        .adr            ( mux_ram_addr[10:0]   ),  //ram_addr[12:2]
        .d              ( mux_ram_data_in1[127:0]       ), 
        .wem            ( mux_ram_bwem[127:0]           ), 
        .we             ( mux_ram_bwe01                 ), 
        .me             ( mux_ram_ce01                  ), 
        .clk            ( clk_axi                       ), 
        .test1          ( 1'b0      ), 
        .rme            ( 1'b0      ), 
        .rm             ( 4'd0      ), 
        .ls             ( 1'b0      )
        );
sram_2048x128_wrapper u10_sram_2048x128_wrapper( 
        .q              ( ram_data_out10                ), 
        .adr            ( mux_ram_addr[10:0]   ),  //ram_addr[12:2]
        .d              ( mux_ram_data_in2[127:0]       ), 
        .wem            ( mux_ram_bwem[127:0]           ), 
        .we             ( mux_ram_bwe10                 ), 
        .me             ( mux_ram_ce10                  ), 
        .clk            ( clk_axi                       ), 
        .test1          ( 1'b0      ), 
        .rme            ( 1'b0      ), 
        .rm             ( 4'd0      ), 
        .ls             ( 1'b0      )
        );
sram_2048x128_wrapper u11_sram_2048x128_wrapper( 
        .q              ( ram_data_out11                ), 
        .adr            ( mux_ram_addr[10:0]   ),  //ram_addr[12:2]
        .d              ( mux_ram_data_in3[127:0]       ), 
        .wem            ( mux_ram_bwem[127:0]           ), 
        .we             ( mux_ram_bwe11                 ), 
        .me             ( mux_ram_ce11                  ), 
        .clk            ( clk_axi                       ), 
        .test1          ( 1'b0      ), 
        .rme            ( 1'b0      ), 
        .rm             ( 4'd0      ), 
        .ls             ( 1'b0      )
        );

/*
sad2lsph4s1p2048x128m4b2w1c1p0d0t0s10 u00_sram_2048x128( 
        .Q              ( ram_data_out00                ), 
        .ADR            ( mux_ram_addr[10:0]   ),  //[12:2]
        .D              ( mux_ram_data_in0[127:0]        ), 
        .WEM            ( mux_ram_bwem[127:0]           ), 
        .WE             ( mux_ram_bwe00                 ), 
        .ME             ( mux_ram_ce00                  ), 
        .CLK            ( clk_axi                       ), 
        .TEST1          ( 1'b0      ), 
        .RME            ( 1'b0      ), 
        .RM             ( 4'd0      ), 
        .LS             ( 1'b0      )
        );
sad2lsph4s1p2048x128m4b2w1c1p0d0t0s10 u01_sram_2048x128( 
        .Q              ( ram_data_out01                ), 
        .ADR            ( mux_ram_addr[10:0]   ), //[12:2]
        .D              ( mux_ram_data_in1[127:0]       ), 
        .WEM            ( mux_ram_bwem[127:0]           ), 
        .WE             ( mux_ram_bwe01                 ), 
        .ME             ( mux_ram_ce01                  ), 
        .CLK            ( clk_axi                       ), 
        .TEST1          ( 1'b0                          ), 
        .RME            ( 1'b0                          ), 
        .RM             ( 4'd0                          ), 
        .LS             ( 1'b0                          )
        );
sad2lsph4s1p2048x128m4b2w1c1p0d0t0s10 u10_sram_2048x128( 
        .Q              ( ram_data_out10                 ), 
        .ADR            ( mux_ram_addr[10:0]   ),  //[12:2]
        .D              ( mux_ram_data_in2[127:0]        ), 
        .WEM            ( mux_ram_bwem[127:0]           ), 
        .WE             ( mux_ram_bwe10                 ), 
        .ME             ( mux_ram_ce10                  ), 
        .CLK            ( clk_axi                       ), 
        .TEST1          ( 1'b0      ), 
        .RME            ( 1'b0      ), 
        .RM             ( 4'd0      ), 
        .LS             ( 1'b0      )
        );
sad2lsph4s1p2048x128m4b2w1c1p0d0t0s10 u11_sram_2048x128( 
        .Q              ( ram_data_out11                 ), 
        .ADR            ( mux_ram_addr[10:0]   ), //[12:2]
        .D              ( mux_ram_data_in3[127:0]        ), 
        .WEM            ( mux_ram_bwem[127:0]           ), 
        .WE             ( mux_ram_bwe11                 ), 
        .ME             ( mux_ram_ce11                  ), 
        .CLK            ( clk_axi                       ), 
        .TEST1          ( 1'b0                          ), 
        .RME            ( 1'b0                          ), 
        .RM             ( 4'd0                          ), 
        .LS             ( 1'b0                          )
        );
*/

endmodule
